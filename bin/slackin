#!/usr/bin/env node

const args = require('args');
const slackin = require('./../dist').default;
const hostenv = require('hostenv');
const dbg = require('debug');

const mainLog = dbg('slackin:main');

args
  .option(
    ['p', 'port'], 'Port to listen on [$SLACKIN_PORT or 3000]',
    process.env.SLACKIN_PORT || hostenv.PORT || 3000,
  )
  .option(
    ['h', 'hostname'], 'Hostname to listen on [$SLACKIN_HOSTNAME or 0.0.0.0]',
    process.env.SLACKIN_HOSTNAME || hostenv.HOSTNAME || '0.0.0.0',
  )
  .option(
    ['c', 'channels'], 'One or more comma-separated channel names to allow single-channel guests [$SLACKIN_CHANNELS]',
    process.env.SLACKIN_CHANNELS,
  )
  .option(
    ['i', 'interval'], 'How frequently (ms) to poll Slack [$SLACKIN_INTERVAL or 60000]',
    process.env.SLACKIN_INTERVAL || 60000,
  )
  .option(['P', 'path'], 'Path to serve slackin under', '/')
  .option(['s', 'silent'], 'Do not print out warns or errors')
  .option(['x', 'cors'], 'Enable CORS for all routes')
  .option(
    ['a', 'analytics'], 'Google Analytics ID',
    process.env.SLACKIN_ANALYTICS,
  )
  .option(
    ['R', 'recaptcha-secret'], 'reCAPTCHA secret',
    process.env.RECAPTCHA_SECRET,
  )
  .option(
    ['K', 'recaptcha-sitekey'], 'reCAPTCHA sitekey',
    process.env.RECAPTCHA_SITEKEY,
  )
  .option(
    ['I', 'recaptcha-invisible'], 'Use invisible reCAPTCHA',
    process.env.RECAPTCHA_INVISIBLE && process.env.RECAPTCHA_INVISIBLE !== '',
  )
  .option(
    ['T', 'theme'], 'Color scheme to use, "light" (default) or "dark"',
    process.env.SLACKIN_THEME,
  )
  .option(
    ['A', 'accent'], 'Accent color to use instead of a theme default',
    process.env.SLACKIN_ACCENT,
  )
  .option(['C', 'coc'], 'Full URL to a CoC that needs to be agreed to')
  .option(['S', 'css'], 'Full URL to a custom CSS file to use on the main page')
  .option(['?', 'help'], 'Show the usage information');

const flags = args.parse(process.argv, {
  value: '<team-id> <api-token>',
  help: false,
});

const org = args.sub[0] || process.env.SLACK_SUBDOMAIN;
const token = args.sub[1] || process.env.SLACK_API_TOKEN;

if (flags.help) {
  args.showHelp();
}

if (!org || !token) {
  args.showHelp();
} else {
  flags.org = org;
  flags.token = token;
}

flags.recaptcha = {
  secret: flags.recaptchaSecret,
  sitekey: flags.recaptchaSitekey,
  invisible: !!flags.recaptchaInvisible,
};

const { port, hostname } = flags;

slackin(flags).listen(port, hostname, (err) => {
  if (err) throw err;
  if (!flags.silent) mainLog.enabled = true;
  mainLog('Listening on %s:%d', hostname, port);
});
